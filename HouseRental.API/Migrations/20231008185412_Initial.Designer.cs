// <auto-generated />
using System;
using HouseRental.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HouseRental.API.Migrations
{
    [DbContext(typeof(HouseRentalDbContext))]
    [Migration("20231008185412_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HouseRental.Domain.Entities.House", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("RentalCostPerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7f8b1ff-4c72-4925-8b17-892afd8b008a"),
                            Address = "Andrews Ganj, South Delhi",
                            IsAvailable = true,
                            RentalCostPerMonth = 20000m,
                            Type = "2BHK"
                        },
                        new
                        {
                            Id = new Guid("e81065ab-1cfd-464a-92f7-5a7301ed943a"),
                            Address = "Habibganj, Bhopal",
                            IsAvailable = true,
                            RentalCostPerMonth = 22000m,
                            Type = "3BHK"
                        },
                        new
                        {
                            Id = new Guid("4a558851-79ff-489e-bec3-2a512723a367"),
                            Address = "Budhha Colony, Patna",
                            IsAvailable = true,
                            RentalCostPerMonth = 15000m,
                            Type = "2BHK"
                        },
                        new
                        {
                            Id = new Guid("23c9e7a3-170f-45f6-a425-0f39241f05de"),
                            Address = "Cyber city, Gurugram",
                            IsAvailable = true,
                            RentalCostPerMonth = 10000m,
                            Type = "1BHK"
                        });
                });

            modelBuilder.Entity("HouseRental.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RentalEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalRentalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HouseId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("HouseRental.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e45cd3bf-4f06-468f-9326-80309bde66d0"),
                            Email = "admin1@mail.com",
                            IsAdmin = true,
                            Name = "Admin1",
                            Password = "Admin@123"
                        },
                        new
                        {
                            Id = new Guid("28524ca4-3cf3-41fe-89a2-1db8bb141f97"),
                            Email = "admin2@mail.com",
                            IsAdmin = true,
                            Name = "Admin2",
                            Password = "Admin@123"
                        },
                        new
                        {
                            Id = new Guid("f680c07a-5423-44c9-8f18-bb35d7d9e2be"),
                            Email = "aman@mail.com",
                            IsAdmin = false,
                            Name = "Aman",
                            Password = "Aman@123"
                        },
                        new
                        {
                            Id = new Guid("f6531df2-077f-433e-a3bd-7e512b998f83"),
                            Email = "rohan@mail.com",
                            IsAdmin = false,
                            Name = "Rohan",
                            Password = "Rohan@123"
                        },
                        new
                        {
                            Id = new Guid("7cb4f235-9d85-4fe0-8426-8341116c5831"),
                            Email = "sana@mail.com",
                            IsAdmin = false,
                            Name = "Sana",
                            Password = "Sana@123"
                        });
                });

            modelBuilder.Entity("HouseRental.Domain.Entities.Rental", b =>
                {
                    b.HasOne("HouseRental.Domain.Entities.House", "House")
                        .WithOne("Rental")
                        .HasForeignKey("HouseRental.Domain.Entities.Rental", "HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HouseRental.Domain.Entities.User", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HouseRental.Domain.Entities.House", b =>
                {
                    b.Navigation("Rental")
                        .IsRequired();
                });

            modelBuilder.Entity("HouseRental.Domain.Entities.User", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
